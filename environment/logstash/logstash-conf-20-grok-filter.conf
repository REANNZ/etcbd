filter {
  if [fields][server] == "apache" and [fields][logtype] == "ssl" {
    grok {
      # pattern based on COMMONAPACHELOG as available at
      # https://github.com/logstash-plugins/logstash-patterns-core/blob/master/patterns/grok-patterns
      match => { "message" => "\[%{HTTPDATE:timestamp}\] %{IPORHOST:clientip} %{NOTSPACE:SSL_PROTOCOL} %{NOTSPACE:SSL_CIPHER} \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" (?:%{NUMBER:bytes}|-)" }

      # we have no inner message to replace so leave this out
      #overwrite => [ "message" ]
    }
    date {
      # Format: 13/Jan/2016:11:55:40 +1300 (GROK: HTTPDATE)
      match => [ "timestamp", "dd/MMM/YYYY:HH:mm:ss Z"]
    }
  }

  if [fields][server] == "apache" and [fields][logtype] == "combined" {
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}" }

      # we have no inner message to replace so leave this out
      #overwrite => [ "message" ]
    }
    date {
      # Format: 13/Jan/2016:11:55:40 +1300 (GROK: HTTPDATE)
      match => [ "timestamp", "dd/MMM/YYYY:HH:mm:ss Z"]
    }
  }

  if [fields][server] == "apache" and [fields][logtype] == "errorlog" {
    grok {
      match => { "message" => "%{HTTPD24_ERRORLOG}" }

      # replace message with the inner message
      overwrite => [ "message" ]
    }
    date {
      # Format: Wed Jan 13 11:50:44.327650 2016 (GROK: HTTPDERROR_DATE)
      match => [ "timestamp", "EEE MMM dd HH:mm:ss.SSSSSS YYYY"]
    }
  }

  if [fields][server] == "freeradius" and [fields][logtype] == "linelog" {
    grok {
      # Parse freeradius linelog
      # Pattern as per /etc/raddb/mods-available/linelog
      # Access-Request = "\"%S\",\"%{reply:Packet-Type}\",\"%{reply:Chargeable-User-Identity}\",\"%{Operator-Name}\",\"%{Packet-Src-IP-Address}\",\"%{NAS-IP-Address}\",\"%{Client-Shortname}\",\"%{User-Name}\""
      # Example:
      # "2016-01-12 14:24:31","Access-Accept","496d42c40d40af717d9ea02c4b248a09ff58757a","1reannz.co.nz","210.7.47.27","210.7.40.57","reannz.ac.nz-1","sam@sandstone.edu.au"
      # Note that Operator_Name should be prefixed with Namespace ID ("1" for REALM) as per RFC5580)
      # - so drop the prefix if present before storing the value as operator_name.
      match => { "message" => "\"%{TIMESTAMP_ISO8601:timestamp}\",\"%{USERNAME:reply_packet_type}\",\"(?:%{USERNAME:chargeable_user_identity})?\",\"1?(?:%{USERNAME:operator_name})?\",\"%{IP:packet_src_ip}\",\"(?:%{IP:nas_ip_address})?\",\"(?:%{USERNAME:client_short_name})?\",\"(?:%{EMAILADDRESS:username})?\"" }

      # we have no inner message to replace so leave this out
      #overwrite => [ "message" ]
    }
    if [fields][timezone] {
      mutate {
        add_field => { "timestamp_with_timezone" => "%{timestamp} %{[fields][timezone]}" }
      }
      date {
        match => [ "timestamp_with_timezone", "YYYY-MM-dd HH:mm:ss ZZZ"]
      }
    } else {
      date {
        match => [ "timestamp", "YYYY-MM-dd HH:mm:ss"]
      }
    }

    # parse username/realm
    if [username] {
      grok {
        # Parse username: get realm
        match => { "username" => "[^@]*@%{USERNAME:realm}" }
      }
      grok {
        # Parse realm: get country
        match => { "realm" => "[-_\.a-zA-Z0-9]*\.(?<realm_country>[-_a-zA-Z0-9]+)" }
      }
    }
    # END parse username/realm

    # add realm_country_is_local
    if [realm_country] {
      if [realm_country] == "${LOCAL_COUNTRY}" {
        mutate { add_field => { "realm_country_is_local" => 1 } }
      } else {
        mutate { add_field => { "realm_country_is_local" => 0 } }
      }
    }

    # parse operator_name/site
    if [operator_name] {
      grok {
        # Parse operator_name/site: get country
        match => { "operator_name" => "[-_\.a-zA-Z0-9]*\.(?<site_country>[-_a-zA-Z0-9]+)" }
      }
    }
    # END parse operator_name/site

    # add site_country_is_local
    if [site_country] {
      if [site_country] == "${LOCAL_COUNTRY}" {
        mutate { add_field => { "site_country_is_local" => 1 } }
      } else {
        mutate { add_field => { "site_country_is_local" => 0 } }
      }
    }

  }

  if [fields][server] == "radsecproxy" and [fields][logtype] == "radsecproxy" {
    grok {
      # Parse radsecproxy logs (modified to include Operator_Name and CUI)
      # Pattern as below
      # Jul 27 02:11:24 2018: Access-Accept for user testuser@nus.edu.sg stationid 02-00-00-00-00-01 from SG_NRS_1 to 172.23.4.1 (172.23.4.1) (Operator_Name reannz.co.nz) (CUI 6e931447d4a9a42153d19ef3c0c8875d31b98e69)
      # NOTE:
      #  * timestamp - custom expression built on grok basics
      #  * reply_packet_type: Access-Acept OR Access-Reject (OR possibly Accounting-Response)
      #  * logusername: either full username or just from '@' onwards - either is OK
      #    (empty user part accepted when parsing username to get realm)
      #    TODO: support empty local username when parsing email address
      #  * OPTIONAL: stationid: may be MAC, "undisclosed", partly-hashed (preserving vendor part of the MAC),
      #    or fully hashed
      #    - e.g., 02-00-00-fe0a29e37dd070ea6c6192380e323bf8810d2ee4e61ccc28db59ee9494c90d1d for vendor-hashed
      #    - may be completely skipped when the rq has now Calling_Station_Id attribute
      #  * reply_server_name: (conf entry of REPLY server) OR "_self_"
      #  * OPTIONAL: reply_msg: optionally enclosed in "()"
      #    * enclosed as long as asprintf does not fail, so lets say always encloded in "()"
      #    * directly following reply_server_name
      #  * client_short_name: conf name of original RQ server
      #  * client_server_ip: IP address of RQ server (NOTE: this is different from packet_src_ip in FreeRadius linelog)
      #  And our custom extension (make them optional)
      #  * operator_name: logged as-is (so with Namespace_ID prefix) (or blank)
      #  * CUI: logged as-is (or blank)
      #  
      # NOTE: replylog() in radsecproxy can also log two other messages - one when username is missing, and one
      # when closing an Access-Request without having received a Response.
      # A request without a username is not relevant from eduroam perspective,
      # so we are not interested in a response to it...
      match => { "message" => "(?<timestamp>[A-Z][a-z]{2}  ?\d{1,2} %{TIME} %{YEAR}): %{USERNAME:reply_packet_type} for user (?<username>[^@ ]*@%{HOSTNAME})(?: stationid (?<calling_station_id>[a-zA-Z0-9:_-]*))? from (?<reply_server_name>[^()]+)(?:\((?<reply_msg>[^() ]*)\))? to %{NOTSPACE:client_short_name} \(%{IP:rq_server_ip}\)(?: \(Operator_Name 1?%{USERNAME:operator_name}?\) \(CUI (?:%{USERNAME:chargeable_user_identity})?\))?" }

      # we have no inner message to replace so leave this out
      #overwrite => [ "message" ]
    }
    if [fields][timezone] {
      mutate {
        add_field => { "timestamp_with_timezone" => "%{timestamp} %{[fields][timezone]}" }
      }
      date {
        match => [ "timestamp_with_timezone", "MMM dd HH:mm:sss YYYY ZZZ", "MMM  d HH:mm:sss YYYY ZZZ"]
      }
    } else {
      date {
        # use separate pattern for single-digit day-in-month ("Jul  1")
        match => [ "timestamp", "MMM dd HH:mm:sss YYYY", "MMM  d HH:mm:sss YYYY" ]
      }
    }

    # parse username/realm
    if [username] {
      grok {
        # Parse username: get realm
        match => { "username" => "[^@]*@%{USERNAME:realm}" }
      }
      grok {
        # Parse realm: get country
        match => { "realm" => "[-_\.a-zA-Z0-9]*\.(?<realm_country>[-_a-zA-Z0-9]+)" }
      }
    }
    # END parse username/realm

    # add realm_country_is_local
    if [realm_country] {
      if [realm_country] == "${LOCAL_COUNTRY}" {
        mutate { add_field => { "realm_country_is_local" => 1 } }
      } else {
        mutate { add_field => { "realm_country_is_local" => 0 } }
      }
    }

    # parse operator_name/site
    if [operator_name] {
      grok {
        # Parse operator_name/site: get country
        match => { "operator_name" => "[-_\.a-zA-Z0-9]*\.(?<site_country>[-_a-zA-Z0-9]+)" }
      }
    }
    # END parse operator_name/site

    # add site_country_is_local
    if [site_country] {
      if [site_country] == "${LOCAL_COUNTRY}" {
        mutate { add_field => { "site_country_is_local" => 1 } }
      } else {
        mutate { add_field => { "site_country_is_local" => 0 } }
      }
    }

  }

}

