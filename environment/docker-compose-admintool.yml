
#reverse proxy / ssl termination / static file handling
apache:
    restart: always
    build: ./apache/
    container_name: apache
    #log_driver: syslog
    environment:
        DJNRO_HOST: djnro
        HTTPD_ARGS: -DDJNRO_STATIC -DAPACHE_LOGS_STDOUT
    # import DjNRO env to have SITE_PUBLIC_HOSTNAME
    env_file:
        - localdev_djnro.env
        - global-env.env
    ports:
        - "80:80"
        - "443:443"
    volumes:
        - /var/lib/docker-host-volumes/apache-certs:/usr/local/apache2/conf/external
        - /var/lib/docker-host-volumes/apache-logs:/usr/local/apache2/logs
    volumes_from:
        #get access to the static files.
        - djnro
        #?- kibana
    #links to reverse proxy the admin tool and kibana
    links:
        - "djnro:djnro"
        #- "kibana:kibana"

djnro:
    restart: always
    build: ./djnro/
    container_name: djnro
    #log_driver: syslog
    environment:
        DB_HOST: postgres
    env_file:
        - localdev_djnro.env
        - global-env.env
    volumes:
        # NOTE: this is a transient volume (for sharing) - needs to be deleted at shutdown with
        # docker-compose rm -v
        - /djnro/static
        - /var/lib/docker-host-volumes/djnro-data:/djnro/data
    links:
        - "postgres:postgres"

# djnro-cron depending opn djnro....
djnro-scheduler:
    restart: always
    build: ./djnro/
    container_name: djnro-scheduler
    #log_driver: syslog
    environment:
        DB_HOST: postgres
        KML_REFRESH_INTERVAL: 3600
    env_file:
        - localdev_djnro.env
        - global-env.env
    volumes:
        # NOTE: this is a transient volume (for sharing) - needs to be deleted at shutdown with
        # docker-compose rm -v
        - /djnro/static
        - /var/lib/docker-host-volumes/djnro-data:/djnro/data
    volumes_from:
        #get access to the shared data directory
        - djnro
    links:
        - "postgres:postgres"
        - "djnro:djnro"
    command: bash -c 'while true ; do ./manage.py fetch_kml ; sleep $$KML_REFRESH_INTERVAL ; done'

postgres:
    restart: always
    container_name: postgres
    build: ./postgres/
    #log_driver: syslog
    env_file:
        - localdev_postgres.env
        - global-env.env
    volumes:
        - /var/lib/docker-host-volumes/postgres-data:/var/lib/postgresql/data

filebeat:
    restart: always
    container_name: filebeat
    build: ./filebeat
    env_file:
        - global-env.env
    volumes:
        - /var/lib/docker-host-volumes/admintool-filebeat-registry:/var/lib/filebeat
    volumes_from:
        - apache
